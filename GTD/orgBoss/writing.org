* 创意
** Introduction
*** subtree
*** open the link
** review of related literature
** description of study
** methodology
** results and analysis
**  conclusion [%]
** tomato time
番茄时间的本质，是充当时间度量。
用来表示今天一天的工作，用了几个番茄时间，明天能否多工作一个番茄时间来减少无意义的消磨。
在具体项目上，例如：上次写一篇文章用了3个番茄时间，这次能不能提高效率，争取2个番茄时间。
这也就是为什么番茄时间反复强调必须25分钟，且中间不能打断的原因。
** 深入任何一门学科能力                                              :太阳:

#+BEGIN_SRC org
    我写“入门书”而不是“进阶书”的另外一个原因，就像爱因斯坦说的：
                如果你不能向一个六岁小孩解释清楚一个问题，那么你其实并不真的懂。
  我在大学里见过太多讲不清楚问题的教授，中国的美国的都有，后来我发现那是因为他们自己都没弄明白。没有非常深入的见解，
  你是不可能把深奥的东西解释清楚的。反过来，试图把一个问题向完全不懂的人讲清楚，也会大大加深你自己的理解。
  看了我的『怎样写一个解释器』而学会解释器的人都会明白，
  我的理解程度在全世界处于什么地位。没有成千上万次写各种各样解释器的试验，失败和领悟，你是不可能理解到那种程度的。

    深入理解任何一门学问的关键，不是试图去回答越来越“高级”，越来越复杂的问题，而是试图去回答最基础的问题，
  反复地问自己最基础的问题…… 爱因斯坦之所以能发现相对论，不是因为他去思索看起来高级的难题，而是因为他去思索
  一个最基本的问题：时间是什么？其他人觉得这问题很傻，时间不就是一秒一秒过去的那个东西吗？现在是半夜两点，那就是时间！
  然后这些人就永远没机会发现相对论了。同样的，深入理解计算机科学的关键，不是去学习云计算，大数据或者区块链，
  而是去思索最最基本的问题：“计算是什么？” “程序是什么？” “函数是什么？” “变量是什么？” “抽象是什么？” …… 
  你觉得自己知道这些问题的答案吗？那请你再想一想！

    实际上直到 20 世纪初，全世界没有一个数学家真正的理解“函数是什么？” 这个如此基础的问题。
  这些人却天天都在用“函数”这个词，以至于他们的定理和证明里面出现各种奇怪的错误。
  直到 1904 年 Frege 写了这篇论文“What Is A Function?” 这种情况才得到了改善。数学发展了几千年，
  居然没有人真的理解如此基础的，天天都在用的概念。他们以为自己明白了，所以根本没有仔细思考过它是什么。
  就像我们从来没思考过什么是时间，却天天都在谈论“需要多少时间”一样。
#+END_SRC

 [[file:~/.emacs.d/GTD/orgBoss/Journal/20180308::*21:35%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8E%9F%E5%88%99][21:35 设计模式原则]]
**  伟大的网格剖分 
第一次o剖由于球网格存在问题，所以第一个面不能选择

以后则都应该选择第一个面， 这种控制网格划分方式,有时候看之前的block无法看出来！！必须得融汇贯通，包括辅助线的选取。
 [[file:~/.emacs.d/GTD/orgBoss/newgtd.org::*%E6%9C%BA%E8%88%B1%E5%81%8F%E8%88%AA%E7%BB%98%E5%88%B6%20<2017-11-15%20%E5%91%A8%E4%B8%89%2010:44>][机舱偏航绘制 <2017-11-15 周三 10:44>]]
** 笔记的用处 
笔记只能帮助你整理，但是他并不能让你一下子产生idea

不能完全依赖笔记，太依赖笔记，相当于idea没进入过你的脑海里，"只有进入你脑海里的东西才是终身受用!"

笔记可以帮助你梳理idea，要想产生idea一定还得再自己脑海里转转!


笔记可能带给你一个迷惑，觉得记了就会了，其实不见得，还是得学习
** 反复阅读你的writing，并进行修改 

通过反复阅读你的text system，从而改进你的语言表达能力，进而提升你对事物的认知(还是认识?)

在这个过程需要持之以恒的能力
 *
 [[file:~/.emacs.d/GTD/orgBoss/Note/notes.org::*tags%20important%20%5B#B%5D][tags important {#B}]]
** 专注 
专注、专业在于你要做到事情(只有一件一方面最重要的事情)，保持持续的时间投入，
能对各种干扰源说"不"; "不"这个字很重要

有得有失，不说"不",那么就失去你对最重要事情的投入, 完成一件事源自于过程，
而非源自于瞬间! 结果的瞬间必然是来自春种夏浇秋收割,这是恒古不变的道理，
也许只有明白这个过程，你的人生才能得到进一步的生活。

叶：认识源于过程，专业始于投入
<2018-09-29 22:06> 依然有用
这阶段、今年、五年内你要做什么最重要的一件事情呢？
** 任何一项研究，都得写明背景 

一项研究，如果能对idea的来源写的让读者一目了然，那么就值得好好思考，进而不断衍生出新的想法

而背景是什么？ 历史长河中不断演变的过程，对相似问题的整体描述，并提出新的观点想法等

据研究，2.5~4D范围内对风力机气动性能的CFD计算不会有太大的影响，但是如果是尾流则会
有所影响！尾流至少得5D左右！
**  我们总是活在别人的不同级别的抽象级别中 

说不定我们就被定义某人的abstract类中，肆无忌惮的划分，不去管你的感受

当然这就决定人们对于world的看法，对于life的看法

当你自己也局限于那个level的时候，的确，你就是划分为那个abstract类中

world是复杂的，过度的abstract，会导致过度的分级，进而导致传输出现问题，(上行下效有时候是好事，但是有时候也是坏事), 口是心非，阳奉阴违，表里不一、
消极怠工。 也许你就是那个abstract也无所谓， 每个人都是可以evolving的，可以跳出不同的abstract圈， 只要你不要影响到
那个圈子里面的人即可！


 [[file:c:/Users/yzl/perl/testProcessOut.pl::#%20);]]
** 不同的时代总是有灰色交易 

国家会默许这些灰色收入，但是有一点特别重要！决不能吃独食，要团伙作案(大家一起吃，别人也不会把你抖出去)

不同的时代，总会那么的机会，让你吃惊、胆寒，需要你去把握，当然也有一些老狐狸在看着你！

当然这些机会总是给那些消息通天的人得到！这也是为什么大家不断地参与聚会、交流信息


善守者，别人不知其所守，守其不备，功其乏！
善攻者，敌不知其所攻，


善攻者，敌不知其所守，善守者，敌不知其所攻
进攻的人，可以让敌人不知道该防守什么地方；善于防守的人，可以让敌人不知道该从什么地方进攻

兵者，诡道也!
** reviewer 's 态度 

review your life!Review your path! Review your time!

*** 1. 关于we

**** 一般
qAdd a comment to the complex algorithm you wrote.
**** 好
With such a complex algorithm, we should add a clarifying comment.
**** 更好
With such an innovative approach to solving this problem, should we add a clarifying comment explaining it,
 or should we break out some of the expressions into functions that we could name to help the reader follow
 the logical flow?

*** 2.关于问号(golden rule)
**** 2.1一般
Inline this function, please.
**** 2.2较好
Since the function called is a single line, and only called here, let’s inline the function.
**** 2.3最好
Do you think that since this function is a single line, and only called here, 
would it be more understandable to inline it?

通过增加更多的"why"，一方面为大多数人解惑，另一方面也在提高团队的质量

Sensei is the one who is further ahead on the path;
      which characterizes a teacher as one who can look back along a path and say,
 
     “Watch your step there, that’s a particularly slippery spot. 
     If you do fall, it’s okay, because I fell too.” 

It’s a compassionate approach to teaching, which we should all adopt.
Use your intelligent to become an sensei!


Start including more "why" into your explaination, including code examples, deep links into
style guide, and references to existing code that may illustrate your point!


While they all state the same request, I’d argue the last one is the nicest. 
1. First, since we’ve already established that we might not have all the context and be wrong, 
asking a question not only softens the request, but initiates a dialog, not a response.[1.softens the request! 2.initiates a dialog]

2.The other feature it brings is an ego-supporting back-door for both of you. 
Since this isn’t a direct command, the author may be more willing to accept the comment, 
but if the author responds with clarifying information why it should stay, you too, 
are more apt to accept it since it was just a question.

This tip is golden, and I often rephrase all my suggestions as questions.

linter 是 一类 小程序 的总称，它不像编译器程序那么大，它可以用来检查程序的 文体，语句 的 语法，句法错误，并即时标注和指出来
（例如，把声明了但没使用的多余变量指出来，把错误语句 变成黑体）， 是程序开发的辅助工具
** 讲课，意味着找出你所知道的知识并解释给别人，这是学习的最佳方法

一方面首先你需要通过自己(透过自身)扎到问题的答案，来提高自己的能力。

这比简单的问别人须付出更多的努力，不过你正是靠这个来积累经验，同时避免过度地打扰同事。
 
A master never stop learning
** suggest, input, filter, target(SIFT) 

For this article, I will use terms suggestion and completion to
mean subtly different concepts. I'll also use terms explore and
filter in describing various phases in user interaction.

***  Suggestion
Offer the user some suggestions that help explore the space of choices. 
(metaphor: avoid the blank sheet of paper syndrome).
***  Completion
Filter the available choices based on user input with the goal of 
reaching the target as rapidly as possible.
***  Explore
User does not necessarily know what he is looking for, but expects to be 
able to recognize what he wants from the displayed choices.
***  Target
User knows exactly what he wants, e.g., filename, or function-name, 
but would still like to get there with the fewest possible number of 
keystrokes, along with the needed memory aids to guide the decision.


Note that in practice, suggestions and completions work
hand-in-hand, with the visual display playing a central role in
guiding the user through the pace of available choices. In a typical
user interaction session, the space of suggestions gets filtered by
user input to produce the available completions (choices) for the next
round of user input — think of this as a
Suggest/Input/Filter/Target (SIFT) interaction loop. Similarly, explore and
target type activities typically go hand-in-hand, with explore
serving as a memory-aid for locating the target.



#+BEGIN_EXAMPLE
Effective Suggest And Complete In An Eyes-Free Environment
1 Executive Summary
Emacs has always provided a wealth of techniques for rapid keyboard
input (abbrev, dabbrev, hippie-expandand completion come to mind)
alongside a rich collection of tools for navigating among open
buffers. And these affordances have significantly increased over the
last few years with the arrival of packages like ido, company,
helm etc., each replete with different strategies for rapid task
completion such as flex and fuzzy matching. This article investigates
these tools in an eyes-free environment, specifically in the context
of Emacspeak and rapid task completion. I've not investigated every
possible package in this space — instead, I've picked a collection
of packages and techniques that have worked well in an eyes-free
context. Finally, the ultimate metric I use in each case is the time
to successful task completion — since at the end of the day, that's
the only metric that counts when it comes to user productivity.

2 Terminology
For this article, I will use terms suggestion and completion to
mean subtly different concepts. I'll also use terms explore and
filter in describing various phases in user interaction.

Suggestion
Offer the user some suggestions that help explore the space of choices. 
(metaphor: avoid the blank sheet of paper syndrome).
Completion
Filter the available choices based on user input with the goal of 
reaching the target as rapidly as possible.
Explore
User does not necessarily know what he is looking for, but expects to be able to recognize what he wants from the displayed choices.
Target
User knows exactly what he wants, e.g., filename, or function-name, but would still like to get there with the fewest possible number of keystrokes, along with the needed memory aids to guide the decision.


Note that in practice, suggestions and completions work
hand-in-hand, with the visual display playing a central role in
guiding the user through the pace of available choices. In a typical
user interaction session, the space of suggestions gets filtered by
user input to produce the available completions (choices) for the next
round of user input — think of this as a
Suggest/Input/Filter/Target (SIFT) interaction loop. Similarly, explore 
and target type activities typically go hand-in-hand, with explore
serving as a memory-aid for locating the target.


3 Tasks Where Suggestions And Completions Help Speed Up Task Completion
Here are exemplars of tasks that I perform often and where I require
all the help that Emacs can provide in completing the task as rapidly
as possible:

File Navigation
Navigating to and opening a file — either code or prose.
Content Navigation
Jump to a specific location (section, function, class/method, or pattern-match) in that file.
Buffer Navigation
Jump to an already open buffer in a long-running Emacs.
If that buffer existed — but has since been killed (by
midnight for example), then re-open that buffer.
I do everything in Emacs, so open buffers include a large
number of ORG and LaTeX documents, Web Pages opened in EWW 
(news sites, documentation, blog articles), IM Chats (I use
jabber), Mail Buffers — both open folders and previously
sent messages, and much, much more.
Media
Easily launch media streams including local and streaming media.
EBooks
Open (or jump to an already open) EBook to continue reading.
Code Completion
Complete function/method-name as I type, with an easy affordance to move among the available choices. The Suggest/Input/Filter/Target interaction loop applies here as well.


Notice that as one performs all of these tasks, every target is an
Emacs buffer or Emacs buffer location. In the case of completion, the
target is a string that gets inserted at the current location.

4 Features Of Eyes-Free Interaction
Using spoken output — as opposed to a rich visual display — has
the following special features and/or drawbacks:

A large visual display can offer the user many choices at a time,
and the eye's ability to rapidly scan these choices makes for an
extremely fast Suggest/Input/Filter/Target loop. As an example, an
interface like helm can display a large number of initial
choices, with the user filtering these down with a few strategic key-presses.
Spoken output takes time — and there is simply no way around
this — speeding up speech-rate helps to a point, but speaking
50 choices very fast does not help the user in the explore
phase. This means that effective filtering and ranking of the available
choices takes on added importance.
More importantly, picking a Suggest/Input/Filter/Target (SIFT)
interaction loop that depends on a large display is sub-optimal
for eyes-free interaction.
Given (2,3), smart filtering, flex/fuzzy matching, and ranking
based on past user behavior take on added importance in an
eyes-free environment. As an aside, I have high hopes in this
area for package prescient — though in my few days of usage,
it has yet to make a difference in my productivity.
For many of the tasks enumerated in the previous section, (2, 3
and 4) make ido with flex and fuzzy matching extremely
effective. In contrast, helm with similar flex and fuzzy
matching (via packages helm-flx and helm-fuzzier) adds little
extra benefit — and the fractional extra time to compute and
display the choices can even lead to a minor productivity hit.
When it comes to writing code with completion, package company
has proven extremely effective. Notice that when writing code,
one rarely if ever resorts to fuzzy matching — this may well
be subjective. Speaking for myself, I cannot think of function
or method names in the context of fuzzy matching — said
differently, it's hard to think xl for function-name
next-line — even though in a given filtering context, xl
might define the shortest path through the available choices to
the target next-line. Given this, emacspeak implements a
company front-end that allows the user to navigate through the
available choices with succinct spoken feedback, and I use those
choices only after I have typed sufficiently many characters to
have a manageable number of choices — said differently, though
package company is set up to trigger after 3 characters have
been typed, I usually end up typing more — and often resort to
dabbrev or hippee-expand to input this longer prefix.
Some of the shortcomings with eyes-free interaction enumerated
above lead to my looking for effective work-arounds that might
well work well outside the eyes-free context, e.g. when the
available choices are too large to fit on a typical visual
display. Interestingly, most of these have also been solved by
mainstream Emacs developers in their never-ending/unerring quest for increased
productivity — package ido and company are excellent exemplars.


Mapping Solutions To Tasks

This section maps the various solutions I use to speed up the tasks
enumerated earlier in this article.

4.1 File And Buffer Navigation
I use package ido with add-ons flx-ido and ido-completing-read+
(formerly ido-ubiquitous) as my primary/only solution for this
task. I've dabbled with package helm — primarily via command
helm-mini but have found almost no use-cases where I did better with
helm. I also use command org-switchb to quickly jump to any of my
open org buffers – since that automatically filters the choices
down for me — I can then get to the org-mode buffer I want with
one or two keystrokes. Notice that in all of these cases, I'm relying
on the fact that I mostly know what I want, i.e., the explore phase
does not start with an entirely blank sheet of paper.

4.2 Content Navigation
Incremental search is your biggest and most effective friend in
effective eyes-free interaction — this simply cannot be stressed
enough. That everything in Emacs is searchable via
incremental-search is a big win for eyes-free interaction. When you
have a large visual display, the human eye is the search interface of
first resort – you typically use a search-command only if the
target is below the fold or far away from the cursor. Because spoken
output takes time, I use isearch even when the target is one or two
lines away.

Structured navigation comes next in my toolbox for navigating content
— imenu for code, and section navigation for documents (org,
LaTeX). I also use command occur to advantage since that provides a
quick way of finding all the desired targets in a document. Given that
program source-code uses indentation for displaying structure,
hbuilt-in command selective-display remains one of Emacs' hidden
treasures with respect to expanding/collapsing source-code.

Finally, I
use a combination of isearch and structured navigation in
org-mode buffres by collapsing the document, and then using
isearch to reveal the desired content fragment.
In the case of LaTeX documents, I use package reftex to
generate a navigation buffer that functions as an interactive table
of contents. 

4.3 Locating And Playing Media
I keep all my music content organized under ~/mp3.
I keep playlist files that contain stream-links to my favorite
Internet streams under emacspeak/media.
The afore-mentioned techniques using ido enables me to launch
local and streaming media with a small number of keystrokes. Once
selected, the content is played via package emacspeak-m-player
which provides Emacs bindings to all mplayer functionality
via that program's slave-mode. In addition, Emacspeak also
implements a smart emacspeak-m-player-locate-media which uses
Emacs' integration with command locate to turn the located
files matching a given pattern into an interactive play-list.

4.4 EBooks
Jumping to already open ebooks is no different than buffer
navigation. I organize all my ebooks under a single directory
tree, and module emacspeak-epub implements a bookshelf that
allows me to organize and browse my collection along various
axies. Finally, Emacspeak implements a light-weight bookmark
facility that works with eww so that I can save my place in an
ebook across Emacs sessions.

4.5 Code Completion
As covered earlier, I use company along with dabbrev and
hippee-expand while writing code. I also use yasnippet to
generate skeleton code. I use auto-correct-mode to
automatically correct repeated errors, and add abbrevs for
commonly occurring typos. 

5 Summary
Emacs' Suggest/Input/Filter/Target (SIFT) interaction loop is just as
effective in eyes-free interaction — in fact more so .
Fuzzy matching when filtering is a big win when working with spoken
output — it leads to faster task completion.
Navigating ones computing environment based on the underlying
structure and semantics of electronic content is a major win —
both when working with a visual or spoken display. The advantages
just become evident far sooner in the eyes-free context due to the
inherently temporal nature of spoken interaction.
Date: 2018-06-22 Fri 00:00

Author: T.V Raman

Created: 2018-06-23 Sat 17:22
#+END_EXAMPLE

 [[brain:7f09c147-afa3-4968-9c59-e9ec56c9695f][Drracket]]
** 永远不要贸然怀疑别人                                               :地球:
永远不要贸然怀疑别人，也永远不要放弃怀疑别人的权利和自主权

最好这时候眼珠子转转

潜伏，哪有那么容易。短期还可以，长期就特别不容易(长期就没有那么容易)

最好隐身办法，尽可能得罪身边每一个人,
要把自己伪装成别人都讨厌的人，人见人厌（朱厌）,扮成一个贪财、无能的小人物，

千人烦万人厌， 有多烦人就多烦人!

一个没有朋友的人是最不容易漏出破绽的
** 亿万字符正在不断在时空空间重组 

字符序列在光亮同道中，不断地重组又消融，然后在光符通道中形成一个灯笼、画廊般的通道！

分段字符组构成一段一段萤火虫般的光亮通道


 [[file:~/.emacs.d/GTD/orgBoss/Note/notes.org::*%E5%AD%97%E7%AC%A6%E7%BB%84%E5%92%8C%E5%A4%9A%E9%80%89%E7%BB%93%E6%9E%84%E7%9A%84%E5%8C%BA%E5%88%AB][字符组和多选结构的区别]]
** which direction point north?  we need to each other to grow!

总是有个时间找不到北！不知道往哪里走！

We need (to help) each other, if we wanna(are going to) grow!
如果我们想要成长，就要互相帮助!
Where our needs do not make us week(我们的需求，并不会让我们显得脆弱) ,they
make us fully humans(而会展示出我们真正的人性)




We ask for the requirment, not because we need the mercy, Everyone can benefit from the world full with mercy!
(mercy不意味养成饭来张口 钱少伸手)

We all benifit from living in a more compassionate time(day)
经济自由度(economic freedom)


当你遇到困难时，很矛盾想退缩时，想到我这句话也许能帮上你

“爸|妈，不用害怕。你老了，现在是我牵着你们的手往前走了。”


身后有余忘缩手，眼前无路想回头。

小说《乾隆皇帝》里乾隆有一段话，说他为什么要不停地折腾。
他说，他也知道射出去的箭，总有会落地的一天，强弩之末，势不能穿鲁缟。
他所能做的，就是拼命把弓拉满，力求让射出去的箭，晚一点落地。（开弓没有回头箭）

** 逻辑清楚，分清主次(还欠点火候)

这么大的人，还被人说分不清主次，表现逻辑不清楚！

事情的确是一件事情一件事情去做，但是总得有先后，比如yawAngle=10° 可能比30°更好算些，可以先算
当然前提你可能不知道，于是随意选择任意偏航角进行计算（最好是按照顺序来，逻辑本来体现着一种顺序）

做之前一定得想好了！思考清楚再开始做！

比如三滑移，本身的尺寸应该是偏摆轴在地面上也就是距离旋转轴90m位置处(下移90m)
这点位置很重要，因为会导致旋转方向的切向速度分量发生改变，进而改变局部流动攻角！

切记！切记！

Review: 综述(回看--->Predict预测）
Research: 研究(再搜索==研究)

 [[file:~/.emacs.d/README.md::%E6%9B%B4%E8%AF%A6%E7%BB%86%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E5%8F%82%E8%80%83%5BWeb-mode.org%5D%5B54%5D]]
** old school and modern feature                                 :emacslisp:

James Gill has a nice tweet about the community of Emacs users:

    I’ve never encountered a community like that of #Emacs users. So many with 10, 20, 30+ years using the tool,
    endless resources and helpful people.
    And so delightfully ‘old school’ and modern at the same time.

An elegant weapon, for a more civilized age.

— James Gill (@IamJamesGill) August 21, 2018

Like most of you, I belong to several tech communities. Not all of them have as nice a reputation.
 The Lisp community, for example, can be notoriously hostile to n00bs.
 A lot of that is residual grumpiness about the fact that the first thing many n00bs do when 
they arrive is suggest some scheme for doing away with parentheses.
 If you heard that as often as the typical Lisper, you’d be grumpy too.

Still, there’s no denying that the Emacs community is exceptionally welcoming to n00bs and that,
 as Gill says, we have a lot of people with extensive experience who are willing to help n00bs as well as more seasoned users.
 We also have folks like Mike Zamansky, Sacha Chua, and Rainer König who spend hours of their own time 
making instructional videos and doing other chores that benefit us all.

I think Gill has it exactly right: We’re old school and modern at the same time.
 Old school because we’re employing an editor that’s older than many of its users 
and modern because that same tool is more powerful and adaptable than its more “modern” competitors.
 In any event, it’s a great community and I’m proud to be a member.

 
old with adaption and modern with more powerful
** 守时是他们的强项 

别小看人(鸡鸣狗盗之人)，守时是他们的强项
 [[file:~/.emacs.d/GTD/orgBoss/newgtd.org::*CFX30%C2%B0%E7%BB%99%E5%AE%9A%E5%81%8F%E8%88%AA%E8%A1%A5%E5%85%85%E8%AE%A1%E7%AE%97%20<2018-06-25%20%E5%91%A8%E4%B8%80%2008:30>][CFX30°给定偏航补充计算 <2018-06-25 周一 08:30>      {100%}]]
** 你只有洗的干净，人家才有吃的欲望 
而如果你洗的不干不净（吃了没病），别人连吃都不想吃

当然别人可能就不好这口也有可能，有些菜只能提供给一些人！

但是洗干净、工作做好，是第一步!
** 协作带来成长 

合作的魅力
*** 不能分享就无法协作 

说到协作，你必然已经很赞成。但是无论体制外宣称要建立生态链，还是体制内高喊牵引分系统，往往还是关起门来当个自给自足的农民，内心的梦想还是想当个土皇上。 

有本事的打天下，把自己的围墙盖到别人的领域里。我们普通人就插个篱笆，保护好自己的一亩三分地。 

协作的好处不常见，协作的风险却无法回避。 

我们说最好的产品，每个系统应当由最优秀的人去做。但是你敢吗？你敢将产品的创意与别人分享吗？你敢让更优秀的人与你竞争吗？ 

经验告诉我们，如果你敢将创意告诉别人，别人会毫不客气地署上他的名字，连个谢谢都不会给你。 

环顾四周，不能与同行分享，怕同行剽窃；不能告诉客户，怕客户泄露给对手；也不能告诉盟友和朋友，在利益的诱惑下，盟友马上变对手，朋友立即变敌人。

你只能在保护的围墙里，扩大自己的队伍，用自家很差的能力，去实现无论如何都不能与别人分享的创意。 

作为企业，所有的研究都要自己做，用自家末流的仿真与末流的实验支持二流的设计，梦想实现一流的创意。作为科研者，即使隔壁就是某专业的大拿，也要自己做，不能敲开隔壁的门求别人。 

我们往往过高估计了创意被剽窃的风险，远远低估了无法分享带来的损失。

 

 

*** 将创意变成公知

也许可以这么做，公开你的创意，把创意告诉同行，告诉客户，告诉对手。快速让所有人知道，谁第一个提出了这个创意。

有100家知道了你的创意，就没人敢谎称是他的原创，这就叫用事实占据正统性。

将自己的创意变成公知，也许是对原创最安全的保护。 

申报专利和版权可以保护一些东西，但是不够。 

最不可取的，就是有选择地告诉个别盟友，叮嘱千万不要告诉别人。你会发现利益面前没有好人。要么谁也不告诉，要么告诉所有人，没有中间道路。 



你的创意被大家知道了，虽然你占据了原创的光荣，但是所有人都成为了竞争对手。 

大家站到了同一个起跑线上，看谁可以最快将创意变成产品。如果你能力不如别人，最后还会输给别人。 

将创意告诉大家，就要接受这个结果。你赌的是你对创意理解最深刻，你对创意最执着，你敢于将竞争的压力变为动力。 

逼迫你与最优秀的团队合作，逼迫你高效率地运行，逼迫你接受批评，逼迫你尊重技术，逼迫你玩命地做到最好，这能说是坏事吗？ 

好创意就应当由好队伍去实现，难道你有了好创意，就有资格让不咋地的队伍去浪费吗？ 

把创意藏在怀里，悄悄自己捅咕，没有最强大的竞争力逼迫你做到极致，没有最优秀的人才与你协作，再好的创意将来也会被别人不咋地的创意超越。 

要对得起好创意，就去呼唤强大的力量与自己竞争，把自己逼迫到拼命的绝境。 

 

 

*** 在竞争中协作

协作是必须的，但是协作还必须竞争，要让整个协作过程就是互相淘汰的过程。 

千万不要一开始上来就分蛋糕，把将来的利益划分得清清楚楚。好像可以避免以后打架，其实将来真的蛋糕出来了，该打架还会打架，但是过程中却失去了互相淘汰的激励。 

优秀的协作者，最初是找到的，后期却是逼出来的。给对方找个虚拟的对手，就能保证对方的积极性。 人性靠不住，最初找个好人家合作，只是减少了后期变卦的风险，给对方找个虚拟对手才是保证协作愉快的良方。

优秀的协作者，最初是谈出来的，后期是培养出来的。谈判桌上的利益终归有限，我多了对方就少了，对方多了我就少了，永远不公平。 

如果让大家说各自贡献了百分之几，再把所有的贡献加起来，肯定大于百分之一百，也许会高达百分之二百、三百甚至一千。人们自恋的程度，会让你大跌眼镜，这个与道德无关，这是人性。 

解决这个问题不是没完没了地谈判，谈判会把大家的注意力，从创造更大的价值，转到争夺更多的利益。 





↘

*** 把成果放大一百倍 

协作的出路，是为协作者培养更大的新蛋糕，让所有的成果分成几份后越分越多。 

几家协作，在最后产品利益之外，还可以获得各自的利益：
材料加工—获得实验数据验证材料特性
实验分析—获得新材料做实验
仿真分析—获得实验数据验证仿真
理论分析—获得实验与仿真的数据
产品设计—获得理论依据与数据支持 

将研究成果共享，所有人从中获利，一份研究成果，不同的专业获得不同的效益，比如提高测量技术、形成仿真软件、申报专业研究项目、建立专业知名度，从中派生出种种成果。而且交叉研究更容易有突破性的发现。 

大家从划分最终产品利益的小圈子，发展到各家打造新蛋糕。逐步培养出来更强大的协作者和更大的利益圈子。 

前方有大协作的多重利益，后面有虚拟对手的威胁，协作可成。
** 对自己要求高，对别人要求低 
很多人活得不开心，都是因为对自己要求低，对别人要求高，其实要是反过来就很好！

对自己要求高，对别人要求低，活得就舒心了
 [[file:~/.emacs.d/GTD/orgBoss/Site/www.site.org::*mastodon][mastodon]]
** Slow down and stop before burning out 

slowdown
slow-down
学会判断的能力 甄子丹《大师兄》, 在失败中成长，而不是在失败中自暴自弃。
之所以谨慎，因为吃过亏，没吃过亏的人，通常是自己过不去，吃过亏长点
记性，反而会一致对外。


Writing code, documentation, helping users
about bugs or helm usage etc., ant it was too much.

I've learned to stop or slow down before burning out. Helm package作者Thierry
Volpiatto一个攀岩爱好者。

在截稿前放慢自己的步调，有时候是一种沉淀。
这也是一种学习。


http://sachachua.com/blog/2018/09/interview-with-thierry-volpiatto/
** 孤独的旅程(I still carry on)---pain
每个人的成长都得伴随着一段孤独的旅程，学会自己寻找方向，自己发现问题，
提出一种方法去解决他。 中国素质教育伴随着太多的考试制度，导致一没有老师
的指点，自己就做不了了，这是很要人命的。

要面对自己的恐惧(face your fear)，要是要心存希望(carry on with hope)。
不要放手(Don't let it go)，别让我失望(don't let me down)
我知道前面还有慢慢长路(I know it is  far way)
我会一直支持你(I'll care you)
知道我无法继续支持你(till I can't go on)
无法承受这份(hold this pain)
我会努力不懈，坚持下去(I still carry on,oh oh, I still carry on)

 https://www.xiami.com/song/1774417231?spm=a1z1s.7154410.1996860241.3.BLxSxJ

It is your job! 不要再次放逐你自己了。

自主学习，自主行动， action by yourself. Independent you, Independent soul, Independent solution.
或者说每个人成长的日子都是追逐独立自主的过程。（Rich Stallman)

你是一个醒着的人？你的灯还亮着？

I'll care you的you代表什么？(你的爱好，你在乎的人，你在乎的事)

 [[file:~/.emacs.d/GTD/orgBoss/Note/notes.org::*%E8%80%81%E5%AE%9E%E4%BA%BA%20%5B#B%5D][老实人 {#B}]]
** 衣服得蕴含有趣-崔哥 (sense of funny)

衣服除了穿和美之外，是不是还得哟一种有趣的味道。

正如写代码也是需要一点有趣的地方

I think that it's extraordinarily important that we in computer science keep fun in computing.
When it started out, it was an awful lot of fun. Of course, the paying customers got shafted 
every now and then, and after a while we began to take their complaints seriously. We began to 
feel as if we really were responsible for the successful, error-free perfect use of these machines.
I don't think we are. I think we're responsible for stretching them, setting them off in new directions,
and keeping fun in the house. I hope the field of computer science never loses its sense of fun. 
Above all, I hope we don't become missionaries. Don't feel as if you're Bible salesmen. 
The world has too many of those already. What you know about computing other people will learn. 
Don't feel as if the key to successful computing is only in your hands. What's in your hands,
 I think and hope, is intelligence: the ability to see the machine as more than when you were 
first led up to it, that you can make it more.

https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-3.html
 
 [[file:~/.emacs.d/GTD/orgBoss/Note/notes.org::*pyqt%20%5B#B%5D][pyqt {#B}]]
** 笨重的大象变小 
 
你的不好的习惯就好像一陀笨重的大象，需要从你的脑海里的
剔除出去。坚持去做你认为该做的事情。默认咒语:"变小、变小
变小，小，小，小",然后"踢出去"

保持良好的习惯，不要让你的惰性指挥着你，学会控制自己。

灵活、变化、趣味是人不可缺少的，过分单调也不是太好。默认
咒语
** 问题分为两部分 

重点：笔记和问题分为人和事两部分(要带着目的，进行倒位和换位 ,倒位是时间思考，换位是空间思考)。

笔记，一定要分开人(你该思考的, 解决方案是什么？ 该怎么干)和事(它的用途，方法，何时用，怎么用，注意点，场景等,它干了什么，优势和劣势)

1. 问人(自己和其他人)
   1. 你该思考什么?
   2. 你的解决方案是什么?
   3. 你该怎么干?
2. 问事(事物本体，以及处于同一问题领域的其他事物)
   1. 它的用途？ 它到底干了什么
   2. 它采用的理论方法?
   3. 他何时被用到？
   4. 它该怎么用
   5. 使用它该注意什么?
   6. 使用他的场景是什么? 和其他工具相比，他有什么优势和劣势?

    
a. 我能否思考清楚我阅读的目的，
b. 并通过阅读主要的重要内容，识别其中哪些是专业问题，并自己提出相关的问题，
c. 最后根据背景内容、背景主题、背景问题，进行改述（简短、清晰、符合总体思想)、重新组织、总结这些信息，
d. 运用图片、模式、节奏、故事的方法进行记忆和可视化？ 


态度就是你之前的处世态度，过去经历。 你的态度就是你的信念、设想、期待以及价值的总和(有四个)。
你的态度就是你看待世界的方式。
因为态度存在很多的设想，设想越多，问题越多，你学习的过程可能就会越多,
所以，你的态度也决定了你能收获、掌握知识的多少。


跳出【或者叫做改变、拓展】你的态度来思考问题【多看看其他人的生活、工作态度，跳出自己狭窄的世界】
学习的态度是不断学习（终生学习就是人的精神)，进行自我教育。以学为乐。不断发现问题、解决问题

博士最别致的特性(也可以叫做态度)就是终生学习的能力。

从哲学观点来看，结论是相对一定条件而言的，结论与条件互为因果关系，
条件（原因）是引起一定现象的现象，结论（结果）是由于条件作用而产生的现象。基于一定的条件推出结论.


   [[file:~/.emacs.d/GTD/orgBoss/Journal/OneJournal.org::*14:31%20%E4%BB%A5%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E4%B8%BA%E6%A0%B8%E5%BF%83%E7%9A%84%E7%AC%94%E8%AE%B0%E8%AE%B0%E5%BD%95%E6%96%B9%E6%B3%95][14:31 以解决问题为核心的笔记记录方法]]
** 学习一个程序的流程                                        :地球:学术:
c语言教学大纲
https://wenku.baidu.com/view/fa095372a417866fb84a8e2e.html
https://www.iqiyi.com/w_19rqrg6xwp.html

数据结构word
https://wenku.baidu.com/view/110e924f19e8b8f67d1cb929.html

把一个程序由不懂到看懂，分三步：(流程、功能、试数，针对于计算机领域)
        1. 流程
        2. 每个语句的功能
        3. 试数
看懂之后，再深入
        4. 看懂以后--去敲程序！不停地敲不停地敲，一遍正确后再敲，再出错再敲！
        5, 日积月累，能力就上来了


对新知识、新对象进行简介，给出他的特点，使用注意情况，运用特定的场合，
明确他的意义，解释他和相似知识点的关系，提出新的方法和概念，简化逻辑过程和使用


都是从它的角度出发,最后两点强调它与问题领域其他对象的关系.

1 Java内省是什么？(它是什么)

2.java内省的特点是什么？

3.使用java内省该注意？

4.java内省主要使用的场所？

5.为什么使用java内省  java introspection存在的意义是什么？

6. java 内省和javaBean 或者Bean类有什么联系？

知识点A
1。 为什么需要A
2。 什么是A 
3。 怎么使用A 【最简答的】 
4。 使用A时注意的问题 
5. A的应用领域（A的运用场景） 
6. A的优缺点


面向对象风格（把A当做一个花生核，你的任务则是填充元组内容)

#+BEGIN_SRC python
  class A
      def __why__
          return "reasons"

      def __what__
          return "What is A"

      def __how__
          return "how to use A"

      def __getAttention__
          return "You must take care sth while you use A"

      def __getApplication__
          return "Other pesons use A"

      def __getBad__
          return "A cannot do sth"

      def __getGoods__
          return "A is good at doing sthjj"
#+END_SRC


函数式风格：

#+BEGIN_SRC python
  print("\n{}\n".format("为什么使用A".next("什么是A").next("怎么使用A").next
                        ("使用A注意什么").next("A的运用场景").next("A的优缺点")))
#+END_SRC

#+RESULTS:


 
 [[file:~/.emacs.d/GTD/orgBoss/Journal/OneJournal.org::*13:24%20ABCD%E5%8E%9F%E5%88%99(%E6%B1%87%E6%8A%A5)--%E6%BC%94%E8%AE%B2%E4%B8%8E%E5%8F%A3%E6%89%8D][13:24 ABCD原则(汇报)--演讲与口才]]
**  每个人都有隐形的时间隧道 
诸葛亮说:"非宁静无以致远"，只有保持长久的注意力，才能完成一个比较有意义的工作，全身心投入一件事情。
把自己变为一束光，投入到时间隧道中(或者时间海洋) 直到完成一件事情，你才能从隧道中出来，每个人都有
一个独立的隐形隧道，只有你自己一个人能够进入
 
 [[file:~/.emacs.d/GTD/orgBoss/Journal/OneJournal.org::*14:31%20%E4%BB%A5%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E4%B8%BA%E6%A0%B8%E5%BF%83%E7%9A%84%E7%AC%94%E8%AE%B0%E8%AE%B0%E5%BD%95%E6%96%B9%E6%B3%95][14:31 以解决问题为核心的笔记记录方法]]
** 变压头阀 

类似限流阀，只在流量迅速改变的时候限压，平时的时候改变很少
国内现在没有。
** 谋定而动 
** 有太多的人在背后设计你？ 

《我在底橙社会中的生活》
一个软件团队在背后，动用大量的人力物力来让你上瘾，爱上它

让你的时间投资该软件。让你的自制力彻底瓦解（whatsoever)

利益永恒？还是兴趣至上？ 还是贪欲无法阻挡？

你的一个paper通常是20min报告，20*100=2000min的准备（你的准备通常是需要更多时间）
背后的工作

那么如何提高自己的自制力？ 我们如何改变自己？ 设计自己？


*** 傻瓜指数?

如果你的傻瓜指数是1天，也就是说你一天内就更新了自己

如果你的傻瓜指数是1辈子，也就是你一辈子都浑浑噩噩的过着

*** 朋友指数?

我身边有多少优秀的新朋友？ 优秀新朋友越多，朋友指数越多

*** 让自己被监督(建立个人品牌，华衫建立个人品牌的意义)
广告的意义，做品牌的价值，被"绑架"的价值,让你的产品受到
舆论最重要的监督，让你的产品持续更新，而不是造假、以次充好。


想要让自己变得更好，不妨事先设计一种方式，让自己被"绑架",比如建立一个github的用户，设计一个项目
让自己广而告之。被“绑架”，被“约束”也许是对我们的帮助

*** 反馈和设计反馈

游戏，它的核心机制，是不确定反馈，在不同的战局会有不同的反馈。
谁点赞、谁评论？ 反馈是一个重要的人体机制。(确定的事情有时候干起来更不激情）


把一个宏大的目标切碎了(说着很难，做起来太不容易）。
心流(heart flow)----切可森米哈赖(心理学家)首次提出。
(沉醉其中，无法自拔，没有感觉到时间的流失)


谁能把目标比作香肠，像切香肠不断切下去，让你能够一步一步的吃完？
而不是给你一坨。（医生职业，做得好，人们鼓励， 厨师职业，好菜，不错，口碑好)


别人喜欢用他们的产品吸引你，可是我偏偏不被吸引，那我们就首先获得了主动权。


*** 每个人心中都有两匹狼

印第安纳州，有一个老人和小孩在对话，
老人说:"每个人的内心里都有两匹狼，其中一头狼奋斗、上进、开心、乐于助人,
另外一头狼阴险、邪恶，臭名昭著,他们每天都在打架着"
小孩问:"那么最后哪条狼赢了"
老人说:"这得看你选择去喂那头狼"(Interesting)
** 不要对自己含糊了

要做的明白，不要敷衍和含糊了。 要做的清楚明白


 
 [[file:~/.emacs.d/GTD/orgBoss/newgtd.org::*Chapter11.%20Modules][Chapter11. Modules]]
